library(RSP)
?runRSP
devtools::check()
library(RSP)
?addCentroids
water <- actel::loadShape(path = system.file(package = "RSP"), #
 shape = "River_latlon.shp", size = 0.0001, buffer = 0.05)
water <- actel::loadShape(shape = system.file(package = "RSP"), #
 shape = "River_latlon.shp", size = 0.0001, buffer = 0.05)
system.file(package = "RSP")
water <- actel::loadShape(shape = paste0(system.file(package = "RSP"), "/River_latlon.shp",
water <- actel::loadShape(shape = paste0(system.file(package = "RSP"), "/River_latlon.shp"), #
 size = 0.0001, buffer = 0.05)
?shapeToRaster
water <- actel::shapeToRaster(shape = paste0(system.file(package = "RSP"), "/River_latlon.shp"), #
 size = 0.0001, buffer = 0.05)
water
tl <- actel::transitionLayer(x = water, directions = 8)
plot(water)
library(terra)
plot(water)
data(input.example)
rsp.data <- runRSP(input = input.example, t.layer = tl, coord.x = "Longitude", coord.y = "Latitude")
dbbmm.data <- dynBBMM(input = rsp.data, base.raster = water, UTM = 56, timeframe = 2)
#' Total dynamic Brownian Bridge Movement Model#
#' #
#' Calculates dynamic Brownian Bridge Movement Model (dBBMM) for each track and transmitter. Tracks shorter than 30 minutes#
#' are automatically identified and not included in the analysis.#
#'#
#' @param input The output of runRSP.#
#' @param base.raster The water raster of the study area. For example the output of \code{\link[actel]{loadShape}}.#
#' @param tags Vector of transmitters to be analysed. By default all transmitters from runRSP will be analysed.#
#' @param start.time Sets the start point for analysis (format = "Y-m-d H:M:S").#
#' @param stop.time Sets the stop point for analysis (format = "Y-m-d H:M:S").#
#' @param UTM The UTM zone of the study area. Only relevant if a latlon-to-metric conversion is required.#
#' @param timeframe Temporal window size for fine-scale dBBMM in hours. If left NULL, a single dBBMM is calculated for the whole period.#
#' @param window.size The size of the moving window along the track. Larger windows provide more stable/accurate estimates of the #
#' brownian motion variance but are less well able to capture more frequent changes in behavior. This number has to be odd.#
#' @param margin The margin used for the behavioral change point analysis. This number has to be odd.#
#' @param verbose Logical: If TRUE, detailed check messages are displayed. Otherwise, only a summary is displayed.#
#' @param debug Logical: If TRUE, the function progress is saved to an RData file.#
#' #
#' @return List of calculated dBBMMs and metadata on each track used for the modelling. #
#' #
#' @examples #
#' \donttest{#
#' # Import river shapefile#
#' water <- actel::loadShape(path = system.file(package = "RSP"), #
#'  shape = "River_latlon.shp", size = 0.0001, buffer = 0.05) #
#' #
#' # Create a transition layer with 8 directions#
#' tl <- actel::transitionLayer(x = water, directions = 8)#
#' #
#' # Import example output from actel::explore() #
#' data(input.example) #
#' #
#' # Run RSP analysis#
#' rsp.data <- runRSP(input = input.example, t.layer = tl, coord.x = "Longitude", coord.y = "Latitude")#
#' #
#' # Run dynamic Brownian Bridge Movement Model (dBBMM)#
#' dbbmm.data <- dynBBMM(input = rsp.data, base.raster = water, UTM = 56)#
#' }#
#' #
#' @export#
#' #
dynBBMM <- function(input, base.raster, tags = NULL, start.time, stop.time, timeframe = NULL, UTM, #
  debug = FALSE, verbose = TRUE, window.size = 7, margin = 3) {#
  base.raster <- raster::raster(base.raster) # Use this for now, until dBBMM with terra is available!#
#
  Timestamp <- NULL#
  if ((window.size %% 2) == 0) {#
    stop("'window.size' must be an odd number", call. = FALSE)#
  }#
  if ((margin %% 2) == 0) {#
    stop("'margin' must be an odd number", call. = FALSE)#
  }#
  if (debug) {#
    on.exit(save(list = ls(), file = "dynBBMM_debug.RData"), add = TRUE)#
    message("!!!--- Debug mode has been activated ---!!!")#
  }#
#
  # paint land rather than water#
  base.raster[is.na(base.raster)] <- 2#
  base.raster[base.raster == 1] <- NA#
  base.raster[base.raster == 2] <- 1#
#
  original.base.raster <- base.raster#
#
  # check input quality#
  if (!is.null(timeframe) && !is.numeric(timeframe))#
    stop("'timeframe' must be either NULL or numeric", call. = FALSE)#
  if (!is.null(timeframe) && timeframe <= 0.5)#
    stop("'timeframe' must be larger than 0.5.", call. = FALSE)#
  if (!missing(start.time) && !grepl("^[1-2][0-9][0-9][0-9]-[0-1][0-9]-[0-3][0-9] [0-2][0-9]:[0-5][0-9]:[0-5][0-9]", start.time))#
      stop("'start.time' must be in 'yyyy-mm-dd hh:mm:ss' format.\n", call. = FALSE)#
  if (!missing(stop.time) && !grepl("^[1-2][0-9][0-9][0-9]-[0-1][0-9]-[0-3][0-9] [0-2][0-9]:[0-5][0-9]:[0-5][0-9]", stop.time))#
      stop("'stop.time' must be in 'yyyy-mm-dd hh:mm:ss' format.\n", call. = FALSE)#
  # Unpack study data#
  detections <- input$detections  #
  spatial <- input$spatial#
  tz <- input$tz#
  # crs <- input$crs#
  bio <- input$bio#
#
  # if (as.character(crs) != as.character(raster::crs(base.raster))) # HF: This should never happen (unless the user screwed up), but I am leaving it here as a tester#
  #   stop("The base raster and the input data are not in the same coordinate system!", call. = FALSE)#
#
  if (raster::isLonLat(base.raster)) {#
    if (missing(UTM))#
      stop("The data are in a latitude-longitude coordinate system, which is incompatible with the dynamic brownian bridge model.\nPlease supply a 'UTM' zone for coordinate conversion.", call. = FALSE)#
    if (missing(UTM) > 1)#
      stop("Please supply only one UTM zone")#
    message("M: Converting coordinates to UTM. Original latitude/longitude values for the detections will be stored in columns 'O.LAT' and 'O.LON'.")#
    flush.console()#
    detections <- lapply(detections, function(x) toUTM(x, crs = crs, UTM = UTM))#
    suppressWarnings(raster::crs(base.raster) <- "+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0")#
    base.raster <- suppressWarnings(raster::projectRaster(base.raster, crs = raster::crs(paste0("+proj=utm +zone=", UTM, " +datum=WGS84 +units=m +no_defs")))) #
    crs <- raster::crs(paste0("+proj=utm +zone=", UTM, " +datum=WGS84 +units=m +no_defs"))#
  } else {#
    if (!missing(UTM))#
      warning("'UTM' supplied but data is already in a metric coordinate system. Skipping transformation.", call. = FALSE, immediate. = TRUE)#
  }#
  # Sub-setting the data for time period of interest:#
  if (!missing(start.time) & missing(stop.time))#
    message("M: Discarding detection data previous to ",start.time," per user command.")#
#
  if (missing(start.time) & !missing(stop.time))#
    message("M: Discarding detection data posterior to ",stop.time," per user command.")#
#
  if (!missing(start.time) & !missing(stop.time)) {#
    if (stop.time < start.time)#
      stop("'stop.time' must be after 'start.time'.", call. = FALSE)#
    if (stop.time == start.time)#
      stop("'stop.time' and 'stop.time' are equal. Continuing would erase all detection data", call. = FALSE)#
      message(paste0("M: Discarding detection data previous to ",start.time," and posterior to ",stop.time," per user command."))#
  }#
#
  if (!missing(start.time)) {#
      start.time <- as.POSIXct(start.time, tz = input$tz)#
      # Detection data#
      detections <- lapply(detections, function(x){#
        x <- subset(x, Timestamp >= start.time)#
        return(x)#
      })#
      remove.empty <- sapply(detections, nrow) != 0#
      detections <- detections[remove.empty]#
    }#
    if (!missing(stop.time)) {#
      stop.time <- as.POSIXct(stop.time, tz = input$tz)#
      # Detection data#
      detections <- lapply(detections, function(x){#
        x <- subset(x, Timestamp <= stop.time)#
        return(x)#
      })#
      remove.empty <- sapply(detections, nrow) != 0#
      detections <- detections[remove.empty]#
    }#
#
  # Prepare detections#
  message("M: Preparing data to apply dBBMM.")#
  detections <- trimDetections(detections = detections, tags = tags)#
  group.list <- groupDetections(detections = detections, tz = tz, bio = bio, timeframe = timeframe) #
#
  if (attributes(group.list)$type == "group")#
    before <- sum(unlist(lapply(group.list, nrow)))#
  if (attributes(group.list)$type == "timeslot")#
    before <- sum(unlist(lapply(group.list, function(group) lapply(group, nrow))))#
#
  group.list <- checkGroupQuality(input = group.list, verbose = verbose)#
#
  if (attributes(group.list)$type == "group")#
    after <- sum(unlist(lapply(group.list, nrow)))#
  if (attributes(group.list)$type == "timeslot")#
    after <- sum(unlist(lapply(group.list, function(group) lapply(group, nrow))))#
#
  if (before != after)#
    message("M: In total, ", before - after, " detections were excluded as they failed the track quality checks.")#
  rm(before, after)#
#
  valid.tracks <- compileTrackInfo(group.list = group.list)#
#
  # Calculate dBBMM#
  mod_dbbmm <- calculateDBBMM(input = group.list, crs = crs, base.raster = base.raster, #
    window.size = window.size, margin = margin)#
#
  # Remove land areas#
  message("M: Subtracting land areas from output.")#
  dbbmm.rasters <- clipLand(input = mod_dbbmm, base.raster)#
  if (attributes(mod_dbbmm)$type == "group")#
    return(list(dbbmm = mod_dbbmm, base.raster = original.base.raster, valid.tracks = valid.tracks,#
      group.rasters = dbbmm.rasters, spatial = spatial))  #
#
  if (attributes(mod_dbbmm)$type == "timeslot"){#
    # make timeslot data frame before finishing#
    aux <- do.call(rbind.data.frame, detections)#
    aux <- range(aux$Timestamp)#
    aux[1] <- round.POSIXt(x = (aux[1]), units = "days") #
    aux[2] <- round.POSIXt(x = (aux[2]), units = "days")#
    timebreaks <- seq(from = aux[1], #
                     to = aux[2],#
                     by = 3600 * timeframe)#
#
    timeslots <- data.frame(#
      slot = 1:(length(timebreaks) - 1),#
      start = timebreaks[-length(timebreaks)],#
      stop = timebreaks[-1] - 1)#
    return(list(dbbmm = mod_dbbmm, base.raster = original.base.raster, valid.tracks = valid.tracks,#
      group.rasters = dbbmm.rasters, timeslots = timeslots, spatial = spatial)) #
  }#
}#
#
#' Calculate the dBBMM for each group#
#' #
#' @param input The detections to be used as input for the model#
#' @inheritParams groupDetections#
#' @param window.size The window size#
#' @param margin The margin#
#' @param base.raster The raster object#
#' #
#' @return A list of dBBMM's per group#
#' #
#' @keywords internal#
#' #
calculateDBBMM <- function(input, crs, base.raster, window.size, margin) {#
#
  the.dbbmm.call <- function(x, rst, err, window.size, margin) {#
    output <- move::brownian.bridge.dyn(#
      object = x,#
      raster = rst,  #
      window.size = window.size,#
      margin = margin,#
      location.error = err)#
    return(output)#
  }#
#
  if (attributes(input)$type == "group") {#
    # Create a move object for all animals together:#
    loc <- lapply(input, function(i) {#
      move::move(x = i$Longitude, y = i$Latitude, time = i$Timestamp,#
                 proj = crs, #
                 animal = i$ID)#
    })#
#
    # Calculate dynamic Brownian Bridge Movement Model:#
    mod_dbbmm <- lapply(seq_along(loc), function(i) {#
      message("M: Calculating dBBMM: ", crayon::bold(crayon::green(names(loc)[i])))#
      flush.console()#
      time.spent <- system.time(suppressWarnings(suppressMessages( # HF: temporarily suppress new raster warnings. We need to revisit this once move::brownian.bridge.dyn has been updated#
        output <- tryCatch(#
          callr::r(func = the.dbbmm.call, #
                   args = list(x = loc[[i]], #
                               rst = base.raster, #
                               window.size = window.size,#
                               margin = margin,#
                               err = input[[i]]$Error),#
                   spinner = TRUE),#
          error = function(e) {#
            if (grepl("consider extending the raster", e))#
              stop("The brownian bridge model needs a larger raster to work on. This could happen because some of the detections are too close to the raster's edge. #
You can create a larger raster by using the argument 'buffer' in loadShape. If the error persists, increase the buffer size further.", call. = FALSE)#
            else#
              stop(e)#
          })#
        )))#
      if (length(unique(input[[i]]$ID)) == 1)#
        names(output) <- unique(input[[i]]$ID)#
#
      time.spent <- minuteTime(time.spent["elapsed"], format = "s", seconds = TRUE)#
      message("M: Success! (Time spent: ", time.spent, ")")#
      flush.console()#
      return(output)#
      })#
    names(mod_dbbmm) <- names(loc)#
    attributes(mod_dbbmm)$type <- "group"#
    return(mod_dbbmm)#
  }#
#
  if (attributes(input)$type == "timeslot") {#
    # Create a move object for per timeslot:#
    loc <- lapply(input, function(group) {#
      aux <- lapply(group, function(timeslot) {#
        move::move(x = timeslot$Longitude, y = timeslot$Latitude, time = timeslot$Timestamp,#
                   proj = crs, #
                   animal = timeslot$ID)#
      })#
    })#
#
    # Calculate dynamic Brownian Bridge Movement Model:#
    mod_dbbmm <- lapply(seq_along(loc), function(g) {#
      message("M: Calculating dBBMM: ", crayon::bold(crayon::green(names(loc)[g])))#
      flush.console()#
      pb <-  txtProgressBar(min = 0, max = length(loc[[g]]),  #
                            initial = 0, style = 3, width = 60)#
      counter <- 0#
      time.spent <- system.time(suppressWarnings(suppressMessages( # HF: temporarily suppress new raster warnings. We need to revisit this once move::brownian.bridge.dyn has been updated#
        aux <- lapply(seq_along(loc[[g]]), function(i) {#
          output <- tryCatch(#
            callr::r(func = the.dbbmm.call, #
                     args = list(x = loc[[g]][[i]], #
                                 rst = base.raster, #
                                 window.size = window.size,#
                                 margin = margin,#
                                 err = input[[g]][[i]]$Error),                              #
                     spinner = TRUE),#
            error = function(e) {#
              if (grepl("consider extending the raster", e))#
                stop("The brownian bridge model needs a larger raster to work on. This could happen because some of the detections are too close to the raster's edge. #
You can create a larger raster by using the argument 'buffer' in loadShape. If the error persists, increase the buffer size further.", call. = FALSE)#
              else#
                stop(e)#
            })#
            if(length(names(output)) == 1)#
              names(output) <- unique(input[[g]][[i]]$ID)#
            counter <<- counter + 1#
            setTxtProgressBar(pb, counter) # Progress bar    #
          return(output)#
        })#
      )))#
      close(pb)#
      message("M: Success! (Time spent: ", minuteTime(time.spent["elapsed"], format = "s", seconds = TRUE), ")")#
      flush.console()#
      names(aux) <- names(loc[[g]])#
      return(aux)#
      })#
    names(mod_dbbmm) <- names(loc)#
    attributes(mod_dbbmm)$type <- "timeslot"#
    return(mod_dbbmm)#
  }#
}
dbbmm.data <- dynBBMM(input = rsp.data, base.raster = water, UTM = 56, timeframe = 2)
#' Split detections every time "timeframe" hours pass.#
#' #
#' @param input a list of detections per group#
#' @param timerange the time-range over which detections are to be used#
#' @param timeframe the interval of hours in each time slot (in hours)#
#' #
#' @return the detections split by group and time slot#
#' #
#' @keywords internal#
#' #
breakByTimeframe <- function(input, timerange, timeframe) {#
  message("M: Activating separate dBBMM calculations for each time slot.")#
#
  # Separate total timeframe of tracking into temporal windows: starting at midnight#
  timeslots <- seq(from = timerange[1], #
                   to = timerange[2],#
                   by = 3600 * timeframe) # User-defined intervals (6-h default)#
#
  # Fix daylight savings shifts#
  # timeslots[lubridate::dst(timeslots)] <- timeslots[lubridate::dst(timeslots)] - 3600#
  # HF: I have disabled the line above as it was causing issues. I believe R should be able#
  #     to handle the timezones correctly on its own. We need to keep an eye on this until#
  #     we do a test on a longer dataset, that spans over Summer and Winter time.#
  output <- lapply(input, function(x) {#
    x$Slot <- NA_integer_#
    recipient <- lapply(1:(length(timeslots) - 1), function(i) {#
      link <- with(x, Timestamp >= timeslots[i] & Timestamp < timeslots[i + 1])#
      x$Slot[link] <- i#
      return(x$Slot)#
    })#
    x$Slot <- combine(recipient)#
    return(x)#
  })#
#
  output <- lapply(output, function(x) split(x, x$Slot))#
  attributes(output)$type <- "timeslot"#
  return(output)#
} #
#
#' Clip land areas from the dbbmm output#
#' #
#' @param input The dbbmm#
#' @param base.raster the base raster#
#' #
#' @return the dbbmm rasters with the land areas cut out#
#' #
#' @keywords internal#
#' #
clipLand <- function(input, base.raster) {#
  if (attributes(input)$type == "group") {#
    dbbmm.rasters <- lapply(input, function(x) {#
      ras <- move::getVolumeUD(x)#
      water <- raster::mask(x = ras, mask = base.raster, inverse = TRUE)#
      return(water)#
      })#
    attributes(dbbmm.rasters)$type = "group"#
  }#
  if (attributes(input)$type == "timeslot") {#
    dbbmm.rasters <- lapply(input, function(group) {#
      lapply(group, function(x) {#
        ras <- move::getVolumeUD(x)#
        water <- raster::mask(x = ras, mask = base.raster, inverse = TRUE)#
        return(water)#
        })  #
      })  #
    attributes(dbbmm.rasters)$type = "timeslot"#
  }#
  return(dbbmm.rasters)#
}#
#
#' Combine a list of vectors#
#'#
#' Intended to combine vectors where, for each position, only one of the vectors contains data (i.e. the remaining are NA's).#
#' #
#' Copied from \link[actel]{actel}#
#' #
#' @param input a list of vectors with non-overlapping data.#
#' #
#' @return A single vector where all data has been combined.#
#' #
#' @keywords internal#
#' #
combine <- function(input) {#
  if (!inherits(input, "list")) #
    stop("'combine' is only intended to combine a list of vectors to a single vector.")#
  if (length(input) == 1) {#
    output <- input[[1]]#
  } else {#
    if (var(unlist(lapply(input, length))) != 0) #
      stop("All vectors to combine should have the same length.")#
    output <- input[[1]]#
    for (i in 2:length(input)) {#
      to.replace <- !is.na(input[[i]])#
      if (any(!is.na(output)[to.replace])) #
        stop("Trying to combine value to an already used position.")#
      output[to.replace] <- input[[i]][to.replace]#
    }#
  }#
  return(output)#
}#
#' compiles summary information for the tracks used in the dbbmm#
#' #
#' @param group.list the lists of valid detections#
#' #
#' @return a list of valid track summaries#
#' #
#' @keywords internal#
#' #
compileTrackInfo <- function(group.list) {  #
  if (attributes(group.list)$type == "group") {#
    recipient0 <- lapply(group.list, function(group) { # split by group#
      by.tag <- split(group, as.character(group$Transmitter))#
      recipient <- lapply(by.tag, function(tag) { # split by tag#
        aux <- split(tag, as.character(tag$Track))#
        track.aux <- lapply(aux, function(x) { # split by track#
          data.frame(Group = NA_character_,#
            Tag = x$Transmitter[1],#
            Track = x$Track[1], # compile track info#
            valid.n = nrow(x),#
            First.time = x$Timestamp[1],#
            Last.time = x$Timestamp[nrow(x)],#
            Timespan = difftime(x$Timestamp[nrow(x)], x$Timestamp[1], units = "hours")#
            )#
        })#
        tracks <- data.table::rbindlist(track.aux)#
        return(tracks)#
      }) # return by tag#
      return(recipient)#
    }) # return by group#
  }#
#
  if (attributes(group.list)$type == "timeslot") {#
    recipient0 <- lapply(group.list, function(group) { # break by group#
      recipient1 <- lapply(group, function(timeslot) { # break by timeslot#
        by.tag <- split(timeslot, as.character(timeslot$Transmitter))#
        recipient2 <- lapply(by.tag, function(tag) { # break by tag#
          aux <- split(tag, as.character(tag$Track))#
          track.aux <- lapply(aux, function(x) {  # break by track#
            data.frame(Group = NA_character_,#
              Tag = x$Transmitter[1],#
              Track = x$Track[1], # collect info#
              Slot = x$Slot[1],#
              valid.n = nrow(x),#
              First.time = x$Timestamp[1],#
              Last.time = x$Timestamp[nrow(x)],#
              Timespan = difftime(x$Timestamp[nrow(x)], x$Timestamp[1], units = "hours")#
              )#
          })#
          tracks <- data.table::rbindlist(track.aux) # bind tracks#
          return(tracks)#
        }) # return by tag#
        return(recipient2)#
      }) # return by timeslot#
      # simplify#
      aux <- unlist(recipient1, recursive = FALSE)#
      unique.tags <- sort(unique(gsub("^[^\\.]*\\.", "", names(aux))))#
      output <- lapply(unique.tags, function(i) { # merge info from the same tag#
        link <- grepl(paste0(i, "$"), names(aux))#
        data.table::rbindlist(aux[which(link)])#
      })#
      names(output) <- unique.tags#
      return(output)#
    }) # return by group#
  }#
#
  # add group info#
  aux <- lapply(names(recipient0), function(group) {#
    lapply(recipient0[[group]], function(tag) {#
      tag$Group <- group#
      return(tag)#
    })#
  })#
#
  # simplify#
  output <- data.table::rbindlist(unlist(aux, recursive = FALSE))#
  return(output)#
}#
#
#' Prepare detections for the dBBMM#
#' #
#' Joins the detections by group.#
#' #
#' @param detections a list of detections per fish#
#' @param tz the time UTM.zone of the study area#
#' #
#' @return the detections grouped by group#
#' #
#' @keywords internal#
#' #
groupDetections <- function(detections, tz, bio, timeframe = NULL) {#
  # Split transmitters per group variable#
  df.signal <- data.frame(Transmitter = names(detections),#
                          stringsAsFactors = FALSE)#
  # HF: remove spaces from groups#
  if (any(grepl(" ", bio$Group))) {#
    warning("Substituting spaces in group names to avoid function failure.", immediate. = TRUE, call. = FALSE)#
    bio$Group <- gsub(" ", "_", bio$Group)#
  }#
  df.signal$Group <- as.character(bio$Group[match(df.signal$Transmitter, bio$Transmitter)])#
#
  # Get signals per group#
  signal.list <- split(df.signal, df.signal$Group)#
  group.list <- lapply(signal.list, function(x) {#
    output <- do.call(rbind.data.frame, detections[match(x$Transmitter, names(detections))])#
    output$ID <- paste0(output$Transmitter, "_", output$Track) #
    return(output)#
  })#
  attributes(group.list)$type <- "group"#
  # Split data by time slot, if necessary#
  if (!is.null(timeframe)) {#
    aux <- range(sapply(detections, function(x) x$Timestamp))#
    aux <- as.POSIXct(aux, origin = "1970-01-01 00:00:00", tz = tz)#
    aux[1] <- round.POSIXt(x = (aux[1] - 43200), units = "days") # extract 12-h (round previous day)#
    aux[2] <- round.POSIXt(x = (aux[2] + 43200), units = "days") # add 12-h (round next day)#
    group.list <- breakByTimeframe(input = group.list, timerange = aux, timeframe = timeframe)#
  }#
#
  return(group.list)#
}#
#
#' Convert numeric time to HH:MM#
#' #
#' Copied from \link[actel]{actel}#
#'#
#' @param x Single string or a vector of strings containing hours:minutes or hours:minutes:seconds.#
#' @param format the format of x, one of "h" (hours), "m", (minutes) or "s" (seconds).#
#' @param seconds Logical; If TRUE, output is returned in HH:MM:SS format.#
#' #
#' @return Decimal hour equivalent (single value or vector)#
#' #
#' @keywords internal#
#' #
minuteTime <- function(x, format = c("h", "m", "s"), seconds = TRUE) {#
  format <- match.arg(format)#
  .converter <- function(x) {#
    if(!is.na(x)){#
      if(x < 0){#
        x <- abs(x)#
        neg = TRUE#
      } else neg = FALSE#
      if(format == "h") #
        x = x#
      if(format == "m") #
        x = x/60#
      if(format == "s") #
        x = x/3600#
      m = x %% 1#
      h = x - m#
      m = 60 * m#
      s = m %% 1#
      m = m - s#
      s = round(60 * s, 0)#
      if (h < 10) h <- paste0(0, h)#
      if (!seconds & s>30) m = m + 1#
      if (m < 10) m <- paste0(0, m)#
      if (s < 10) s <- paste0(0, s)#
      if (seconds) #
        x <- paste(h, m, s, sep = ":")#
      else #
        x <- paste(h, m, sep = ":")#
      if (neg) x <- paste("-", x)#
    }#
    return(x)#
  }#
  if (length(x) < 1) stop("Input appears to be empty.")#
  if (!is.numeric(x)) stop("Input is not numeric.")#
  if (length(x) == 1) output <- .converter(x)#
  if (length(x) > 1) output <- unlist(lapply(x, .converter))#
  return(output)#
}#
#
#' Converts coordinates to UTM projection#
#' #
#' Convert Coordinate Reference System (CRS) from lonlat to #
#' metric UTM projection, as required for calculating the dynamic Brownian Bridge #
#' Movement Model. #
#'#
#' @param input The detections data frame#
#' @param UTM the UTM zone chosen by the user#
#' @param crs The original coordinate system#
#' #
#' @return Dataframe with the converted coordinates in UTM.#
#' #
#' @keywords internal#
#' #
toUTM <- function(input, UTM, crs) {#
  input$O.LAT <- input$Latitude#
  input$O.LON <- input$Longitude#
  xy <- data.frame(ID = 1:nrow(input), X = input$Longitude, Y = input$Latitude)#
  xy.utm <- terra::project(as.matrix(xy[,c('X', 'Y')]), #
        "+proj=longlat", paste0("+proj=utm +zone=", UTM, " +units=m"))#
  input$Longitude <- xy.utm[,1]#
  input$Latitude <- xy.utm[,2]#
  return(input)#
}#
#
#' Select specific transmitters to analyze#
#' #
#' If the user specifies transmitters, return only the detections for those tags.#
#' #
#' @param detections The detections data frame, provided by one of the main actel functions (explore, migrate, residency)#
#' @param tags A list of transmitters to be analysed.#
#' #
#' @return the trimmed detections list#
#' #
#' @keywords internal#
#' #
trimDetections <- function(detections, tags = NULL) {#
  if (!is.null(tags)) {#
    if (any(link <- is.na(match(tags, names(detections))))) {#
      stop("tags", paste(tags[link], collapse = ", "), "are not part of the input data.", call. = FALSE)#
    }#
    detections <- detections[tags]#
  } else {#
    message("M: No specific transmitters selected. All the data will be used for analysis.")#
  }#
  return(detections)#
}
dbbmm.data <- dynBBMM(input = rsp.data, base.raster = water, UTM = 56, timeframe = 2)
#' Identify and remove duplicated timestamps#
#' #
#' @param input The detections to be checked#
#' @param group The group being analysed, used solely for messaging purposes#
#' #
#' @return The detections without duplicated timestamps#
#' #
#' @keywords internal#
#' #
checkDupTimestamps <- function(input, group, verbose = TRUE) {#
  index <- which(duplicated(input$Timestamp))#
  if (length(index) > 0) {#
    input <- input[-index, ]#
    if (verbose)#
      warning(length(index), " individual detections were removed in group ", group," due to simultaneous detections at two receivers.", immediate. = TRUE, call. = FALSE)#
  }#
  return(input)#
}#
#
#' Performs a series of quality checks on the detection data.#
#' #
#' @param input The detections list#
#' @inheritParams dynBBMM#
#' #
#' @return The detections which can be used for dbbmm#
#' #
#' @keywords internal#
#' #
checkGroupQuality <- function(input, verbose = TRUE) {#
  if (attributes(input)$type == "group") {#
    output <- lapply(names(input), function(i) {#
      outp <- checkDupTimestamps(input = input[[i]], group = i, verbose = verbose)#
      outp <- checkTrackPoints(input = outp, group = i, verbose = verbose)#
      if (!is.null(outp)) {#
        outp <- checkTrackTimes(input = outp, group = i, verbose = verbose)#
        return(outp)#
      } else {#
        return(NULL)#
      }#
    })#
    if (all(link <- unlist(lapply(output, is.null)))) {#
      stop("All detection data failed to pass the quality checks for dBBMM implementation. Aborting.\n", call. = FALSE)#
    }#
    names(output) <- names(input)#
    output <- output[!link]#
    attributes(output)$type <- "group"#
    return(output)#
  }#
#
  if (attributes(input)$type == "timeslot") {#
    output <- lapply(names(input), function(g) {#
      recipient <- lapply(names(input[[g]]), function(i) {#
        aux <- checkDupTimestamps(input = input[[g]][[i]], group = paste0(g, " (timeslot ", i, ")"), verbose = verbose)#
        aux <- checkTrackPoints(input = aux, group = paste0(g, " (timeslot ", i, ")"), verbose = verbose)#
        if (!is.null(aux)) {#
          aux <- checkTrackTimes(input = aux, group = paste0(g, " (timeslot ", i, ")"), verbose = verbose)#
          return(aux)#
        } else {#
          return(NULL)#
        }#
      })#
      names(recipient) <- names(input[[g]])#
      return(recipient[!unlist(lapply(recipient, is.null))])#
    })#
    if (all(link <- unlist(lapply(output, length)) == 0))#
      stop("All detection data failed to pass the quality checks for dBBMM implementation. Aborting.\n", call. = FALSE)#
    names(output) <- names(input)#
    output <- output[!link]#
    attributes(output)$type <- "timeslot"#
    return(output)#
  }#
}#
#
#' Exclude tracks with less than 8 detections#
#' #
#' @inheritParams checkDupTimestamps#
#' #
#' @return The detections for tracks with more than 8 detections#
#' #
#' @keywords internal#
#' #
checkTrackPoints <- function(input, group, verbose = TRUE) {#
  tracks <- split(input, input$ID)#
  link <- unlist(lapply(tracks, nrow)) > 8#
  if (all(!link)) {#
    if (verbose)#
      warning("ALL tracks in group ", group, " have less than eight detections. Removing group from analysis.", immediate. = TRUE, call. = FALSE)    #
    return(NULL)#
  } else {#
    output <- tracks[link]#
    if (verbose && length(tracks) > length(output))#
      warning(length(tracks) - length(output), " track(s) in group ", group, " have less than eight detections and will not be used.", immediate. = TRUE, call. = FALSE)#
    return(do.call(rbind.data.frame, output))#
  }#
}#
#
#' Exclude tracks shorter than 30 minutes:#
#' #
#' @inheritParams checkDupTimestamps#
#' #
#' @return The detections for tracks longer than 30 minutes#
#' #
#' @keywords internal#
#' #
checkTrackTimes <- function(input, group, verbose = TRUE) {#
  tracks <- split(input, input$ID)#
  link <- unlist(lapply(tracks, function(x) {#
    as.numeric(difftime(x$Timestamp[[nrow(x)]], x$Timestamp[[1]], units = "min"))#
  })) >= 30#
  if (all(!link)) {#
    if (verbose)#
      warning("ALL tracks in group ", group, " are shorter than 30 minutes. Removing group from analysis.", immediate. = TRUE, call. = FALSE)    #
    return(NULL)#
  } else {#
    output <- tracks[link]#
    if (verbose && length(tracks) > length(output))#
      warning(sum(!link), " track(s) in group ", group, " are shorter than 30 minutes and will not be used.", immediate. = TRUE, call. = FALSE)#
    return(do.call(rbind.data.frame, output))#
  }#
}
dbbmm.data <- dynBBMM(input = rsp.data, base.raster = water, UTM = 56, timeframe = 2)
areas.group <- getAreas(dbbmm.data, type = "group", breaks = c(0.5, 0.95))
df.centroid <- getCentroids(input = dbbmm.data, type = "group", areas = areas.group, #
   level = 0.95, group = "G1", UTM = 56)
plotAreas(areas.group, base.raster = water, group = "G1", timeslot = 7) +#
   addCentroids(input = df.centroid, type = "group", timeslot = 7)
plotAreas(areas.group, base.raster = water, group = "G1", timeslot = 7)
plotAreas <- function(areas, base.raster, group, timeslot, #
                      title = NULL, col, land.col = "#BABCBF80") {#
  Latitude <- NULL#
  Longitude <- NULL#
  MAP <- NULL#
  x <- NULL#
  y <- NULL#
  layer <- NULL#
  Contour <- NULL#
#
  if (attributes(areas)$area != "group")#
    stop("plotAreas currently only works for 'group' areas. If you want to plot the individual dBBMMs, please use plotContours instead.", call. = FALSE)#
#
  if (!missing(timeslot) && length(timeslot) != 1)#
    stop("Please select only one timeslot.\n", call. = FALSE)#
#
  if (is.na(match(group, names(areas$rasters))))#
    stop("Could not find the specified group in the input data", call. = FALSE)#
#
  group.rasters <- areas$rasters[[group]]#
  if (!missing(timeslot) && attributes(areas)$type != "timeslot")#
    stop("'timeslot' was set but the input data stems from a dbbmm with no timeslots.", call. = FALSE)#
#
  if (missing(timeslot) && attributes(areas)$type == "timeslot")#
    stop("The data have timeslots but 'timeslot' was not set.", call. = FALSE)#
#
  if (!missing(timeslot) && is.na(match(timeslot, names(group.rasters))))#
    stop("Could not find the required timeslot in the specified group.", call. = FALSE)#
#
  if (missing(timeslot)) {#
    the.rasters <- group.rasters#
    ol.crs <- as.character(raster::crs(areas$rasters[[1]][[1]]))#
  } else {#
    the.rasters <- group.rasters[[as.character(timeslot)]]#
    ol.crs <- as.character(raster::crs(areas$rasters[[1]][[1]][[1]]))#
  }#
#
  breaks <- names(the.rasters)#
#
  if (missing(col))#
    col <- cmocean::cmocean('matter')(length(breaks) + 1)[- 1]#
#
  if (as.character(raster::crs(base.raster)) != ol.crs) {#
    warning("The dbbmm output and the base raster are not in the same coordinate system. Attempting to re-project the dbbmm output.", call. = FALSE, immediate. = TRUE)#
    flush.console()#
    reproject <- TRUE#
  } else {#
    reproject <- FALSE#
  }#
  rm(ol.crs)#
#
  # Convert water raster to land raster#
  base.raster[is.na(base.raster)] <- 2#
  base.raster[base.raster == 1] <- NA#
  base.raster[base.raster == 2] <- 1#
#
  # Convert map raster to points#
  # base.map <- raster::rasterToPoints(base.raster)#
  base.map <- terra::as.data.frame(base.raster, xy = TRUE)#
  # base.map <- data.frame(base.map)#
  colnames(base.map) <- c("x", "y", "MAP")#
#
  # Get group contours:#
  contours <- lapply(rev(sort(breaks)), function(i) {#
    the.contour <- the.rasters[[i]]#
    if (reproject)#
      the.contour <- suppressWarnings(raster::projectRaster(the.contour, crs = as.character(raster::crs(base.raster))))#
#
    # raster::extent(the.contour) <- raster::extent(base.raster)#
    output <- raster::rasterToPoints(the.contour)#
    output <- data.frame(output)#
    names(output) <- c("x", "y", "layer")#
    output <- subset(output, layer > 0)#
    output$Contour <- paste0((as.numeric(i) * 100), "%")#
    return(output)#
  })#
  names(contours) <- breaks#
#
  # start plotting#
  p <- ggplot2::ggplot()#
#
  # plot individual contours#
  for (i in breaks) {#
    if (!is.null(contours[[i]]))#
      p <- p + #
        ggplot2::geom_raster(data = contours[[i]], ggplot2::aes(x = x, y = y, fill = Contour))#
  }#
  # overlay the map#
  p <- p + #
    ggplot2::geom_raster(data = base.map, ggplot2::aes(x = x, y = y), #
      fill = land.col, interpolate = TRUE)#
#
  # graphic details#
  p <- p + ggplot2::scale_fill_manual(values = col)#
  p <- p + ggplot2::theme_bw() #
  p <- p + ggplot2::scale_x_continuous(expand = c(0, 0))#
  p <- p + ggplot2::scale_y_continuous(expand = c(0, 0))#
  p <- p + ggplot2::labs(x = "Longitude", y = "Latitude", fill = "Space use")#
  # Add title#
  if (missing(title)) {#
    if (missing(timeslot)){#
      p <- p + ggplot2::labs(title = paste(group))#
    }#
    if (!missing(timeslot)){#
      p <- p + ggplot2::labs(title = paste(group, "-", "Slot", timeslot))#
    }#
  }#
  else#
    p <- p + ggplot2::labs(title = title)#
#
  return(suppressWarnings(print(p)))#
}
plotAreas(areas.group, base.raster = water, group = "G1", timeslot = 7) +#
   addCentroids(input = df.centroid, type = "group", timeslot = 7)
plotAreas(areas.group, base.raster = water, group = "G1", timeslot = 7)
timeslot = 7
group = "G1"
base.raster = water
areas = areas.group
input = df.centroid
type = "group"
timeslot = 7
if (type == "group") {#
    input <- input[which(input[, 1] == timeslot), ]#
    ggplot2::geom_point(data = input, ggplot2::aes(x = input[, "Centroid.lon"], y = input[, "Centroid.lat"]), #
      color = colour, fill = fill, shape = shape, size = size)#
  }
if (type == "track") {#
    if (is.null(tag))#
      stop("Plese provide a 'tag' of interest for plotting")#
    if (is.null(track))#
      stop("Plese provide a 'track' of interest for plotting")#
    aux.tag <- stringr::str_split(tag, pattern = "-")#
    aux.tag <- paste(aux.tag[[1]], collapse = ".")#
    aux.tag <- paste0(aux.tag, "_Track_", track)#
    input <- input[which(input[, "Track"] == aux.tag), ]#
    input <- input[which(input[, 1] == timeslot), ]#
    ggplot2::geom_point(data = input, ggplot2::aes(x = input[, "Centroid.lon"], y = input[, "Centroid.lat"]), #
      color = colour, fill = fill, shape = shape, size = size)#
  }
aux.tag <- stringr::str_split(tag, pattern = "-")
aux.tag
tag = NULL
track = NULL
shape = 21
size = 1.5
colour = "white"
fill = "cyan"
aux.tag <- stringr::str_split(tag, pattern = "-")
aux.tag
aux.tag <- paste(aux.tag[[1]], collapse = ".")
tag
type == "group"
input <- input[which(input[, 1] == timeslot), ]
input
ggplot2::geom_point(data = input, ggplot2::aes(x = input[, "Centroid.lon"], y = input[, "Centroid.lat"]), #
      color = colour, fill = fill, shape = shape, size = size)
plotAreas(areas = areas.group, base.raster = water, group = "G1", timeslot = 7)
input = df.centroid
type = "group"
timeslot = 7
input <- input[which(input[, 1] == timeslot), ]
plotAreas(areas = areas.group, base.raster = water, group = "G1", timeslot = 7) +#
   # addCentroids(input = df.centroid, type = "group", timeslot = 7)
ggplot2::geom_point(data = input, ggplot2::aes(x = input[, "Centroid.lon"], y = input[, "Centroid.lat"]), #
      color = colour, fill = fill, shape = shape, size = size)
addCentroids <- function(input, type, tag = NULL, track = NULL, timeslot = NULL, shape = 21, size = 1.5, colour = "white", fill = "cyan") {#
  if (type == "group") {#
    input <- input[which(input[, 1] == timeslot), ]#
    return(ggplot2::geom_point(data = input, ggplot2::aes(x = input[, "Centroid.lon"], y = input[, "Centroid.lat"]), #
      color = colour, fill = fill, shape = shape, size = size))#
  }#
  if (type == "track") {#
    if (is.null(tag))#
      stop("Plese provide a 'tag' of interest for plotting")#
    if (is.null(track))#
      stop("Plese provide a 'track' of interest for plotting")#
    aux.tag <- stringr::str_split(tag, pattern = "-")#
    aux.tag <- paste(aux.tag[[1]], collapse = ".")#
    aux.tag <- paste0(aux.tag, "_Track_", track)#
    input <- input[which(input[, "Track"] == aux.tag), ]#
    input <- input[which(input[, 1] == timeslot), ]#
    return(ggplot2::geom_point(data = input, ggplot2::aes(x = input[, "Centroid.lon"], y = input[, "Centroid.lat"]), #
      color = colour, fill = fill, shape = shape, size = size))#
  } #
}
plotAreas(areas = areas.group, base.raster = water, group = "G1", timeslot = 7) +#
   addCentroids(input = df.centroid, type = "group", timeslot = 7)
?actel::shapeToRaster
